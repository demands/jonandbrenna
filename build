#!/usr/bin/env ruby

require 'pry'
require 'erb'

PAGES_DIR = "pages"
ASSETS_DIR = "assets"
GENERATED_DIR = "generated"
WRAPPER = "wrapper.html.erb"

def file_contents(fname)
  File.open(fname, 'rb') { |f| f.read }
end

$file_assets = {}
$erb_file_assets = []

Dir.foreach(ASSETS_DIR) do |fname|
  path = File.join(ASSETS_DIR, fname)
  next unless File.file?(path)

  if /(.+)\.erb/ =~ fname
    fname = $1
    $erb_file_assets << fname
  end

  modified_time = File.ctime(path).strftime("%s")
  extension = File.extname(fname)

  $file_assets[fname] = "#{File.basename(fname, extension)}_#{modified_time}#{extension}"
end

$file_assets.each do |fname, generated_fname|
  path = File.join(ASSETS_DIR, fname)
  generated_path = File.join(GENERATED_DIR, generated_fname)

  if $erb_file_assets.include? fname
    File.open(generated_path, 'w') { |f| f.write(ERB.new(file_contents("#{path}.erb")).result(binding)) }
  else
    `cp #{path} #{generated_path}`
  end
end

class Page
  def self.wrapper
    @wrapper ||= ERB.new(file_contents(WRAPPER))
  end
  def initialize(fname)
    @infile_name = fname
    @inner_contents = file_contents(fname)
  end
  attr_reader :inner_contents
  def outfile_name
    File.join(GENERATED_DIR, File.basename(@infile_name))
  end
  def outfile_contents
    self.class.wrapper.result(binding)
  end
  def generate!
    File.open(outfile_name, 'w') {|f| f.write(outfile_contents) }
  end
  def assets
    $file_assets
  end
end

Dir.foreach(PAGES_DIR) do |fname|
  fname = File.join(PAGES_DIR, fname)
  if File.file?(fname)
    Page.new(fname).generate!
  end
end
